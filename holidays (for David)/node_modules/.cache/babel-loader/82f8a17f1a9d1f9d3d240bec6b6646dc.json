{"ast":null,"code":"var _jsxFileName = \"/home/artem/Delinternet/React.js/holidays/src/components/Festas.js\";\nimport React from \"react\";\nimport Papa from \"papaparse\";\nimport \"../App.css\";\n/* const monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n] */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst monthNames = [\"enero\", \"febrero\", \"marzo\", \"abril\", \"mayo\", \"junio\", \"julio\", \"agosto\", \"septiembre\", \"octubre\", \"noviembre\", \"diciembre\"];\n\nclass Upload extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = event => {\n      this.setState({\n        csvfile: event.target.files[0]\n      });\n    };\n\n    this.importCSV = () => {\n      const {\n        csvfile\n      } = this.state;\n      Papa.parse(csvfile, {\n        complete: this.updateData,\n        header: true\n      });\n    };\n\n    this.exportToCSVButton = () => {\n      if (Object.keys(this.parsed).length > 0) {\n        return /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"wrapper-exp-btn btn btn-dark export-btn\",\n          onClick: () => {\n            this.parseJSon();\n          },\n          children: \"Exportar a csv\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }, this);\n      }\n\n      return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n    };\n\n    this.getProcessBtn = () => {\n      if (this.state.csvfile.length <= 0) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"wrapper-choose-btn btn btn-secondary\",\n        onClick: this.importCSV,\n        children: \"Proceso\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.reset = () => {\n      this.filesInput.value = \"\";\n      this.parsed = [];\n      this.setState({\n        csvfile: [],\n        file: [],\n        parse: []\n      });\n    };\n\n    this.getTable = () => {\n      if (!this.state.parse || this.state.parse.length <= 0) {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n      }\n\n      return /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-bordered table-hover\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              scope: \"col\",\n              children: \"Date\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.state.parse.map((record, i) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: Object.keys(record).map((row, i) => {\n                return /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: record[row]\n                }, i, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 194,\n                  columnNumber: 26\n                }, this);\n              })\n            }, i, false, {\n              fileName: _jsxFileName,\n              lineNumber: 192,\n              columnNumber: 15\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }, this);\n    };\n\n    this.state = {\n      csvfile: [],\n      file: [],\n      parse: []\n    };\n    this.parsed = [];\n    this.updateData = this.updateData.bind(this);\n    this.exportToCSVButton = this.exportToCSVButton.bind(this);\n    this.getHeader = this.getHeader.bind(this);\n    this.getFooter = this.getFooter.bind(this);\n    this.getProcessBtn = this.getProcessBtn.bind(this);\n    this.getResetBtn = this.getResetBtn.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  updateData(result) {\n    let _this = this;\n\n    let data = result.data;\n    this.setState({\n      file: data\n    });\n    data.forEach(element => {\n      if (element.name) {\n        let d = new Date(element.date); // _this.newExMonthBill(\n        //   element.endpointName,\n        //   monthNames[d.getMonth()],\n        //   element.price\n        // );\n      }\n    });\n    let parse = [];\n    const extentions = Object.keys(this.parsed);\n    let index = 1;\n\n    for (let i = 0; i < extentions.length; i++) {\n      const currentExt = extentions[i];\n      const currentExtMonths = this.parsed[currentExt];\n      const months = Object.keys(this.parsed[currentExt]);\n\n      for (let j = 0; j < months.length; j++) {\n        const currentMonth = months[j];\n        const ext = currentExt; // 666\n\n        const month = currentMonth; // January\n\n        const price = currentExtMonths[month].toFixed(2); // 0.0585\n\n        parse.push([index, ext, month, price]);\n        index++;\n      }\n    }\n\n    this.setState({\n      parse\n    });\n  }\n\n  newExMonthBill(extansion, month, price) {\n    if (this.parsed[extansion]) {\n      if (this.parsed[extansion][month]) {\n        this.parsed[extansion][month] = parseFloat(price) + this.parsed[extansion][month];\n      } else {\n        this.parsed[extansion][month] = parseFloat(price);\n      }\n    } else {\n      this.parsed[extansion] = {};\n      this.parsed[extansion][month] = parseFloat(price);\n    }\n  }\n\n  parseJSon() {\n    const tableHeader = [[\"Name\", \"Date\"]];\n    let auxData = this.state.parse;\n\n    for (let i = 0; i < tableHeader.length; i++) {\n      auxData.unshift(tableHeader[i].join(\",\"));\n    }\n\n    let csvString = auxData.join(\"%0A\");\n    let a = document.createElement(\"a\");\n    a.href = \"data:attachment/csv,\" + csvString;\n    a.target = \"_blank\";\n    a.download = `festas.csv`;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        width: \"100%\"\n      },\n      children: [this.getHeader(), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          className: \"text-header\",\n          children: \"Elija el archivo csv de llamadas para comenzar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 213,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              className: \"wrapper-input form-control\",\n              type: \"file\",\n              placeholder: \"Elija el archivo\",\n              ref: input => {\n                this.filesInput = input;\n              },\n              name: \"file\",\n              onChange: this.handleChange\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: this.getProcessBtn()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 231,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [this.getResetBtn(), this.exportToCSVButton()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 216,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"wrapper-table\",\n          children: this.getTable()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Upload;","map":{"version":3,"sources":["/home/artem/Delinternet/React.js/holidays/src/components/Festas.js"],"names":["React","Papa","monthNames","Upload","Component","constructor","handleChange","event","setState","csvfile","target","files","importCSV","state","parse","complete","updateData","header","exportToCSVButton","Object","keys","parsed","length","parseJSon","getProcessBtn","reset","filesInput","value","file","getTable","map","record","i","row","bind","getHeader","getFooter","getResetBtn","result","_this","data","forEach","element","name","d","Date","date","extentions","index","currentExt","currentExtMonths","months","j","currentMonth","ext","month","price","toFixed","push","newExMonthBill","extansion","parseFloat","tableHeader","auxData","unshift","join","csvString","a","document","createElement","href","download","body","appendChild","click","render","width","input"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport Papa from \"papaparse\";\nimport \"../App.css\";\n\n/* const monthNames = [\n  'January',\n  'February',\n  'March',\n  'April',\n  'May',\n  'June',\n  'July',\n  'August',\n  'September',\n  'October',\n  'November',\n  'December',\n] */\nconst monthNames = [\n  \"enero\",\n  \"febrero\",\n  \"marzo\",\n  \"abril\",\n  \"mayo\",\n  \"junio\",\n  \"julio\",\n  \"agosto\",\n  \"septiembre\",\n  \"octubre\",\n  \"noviembre\",\n  \"diciembre\",\n];\n\nclass Upload extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      csvfile: [],\n      file: [],\n      parse: [],\n    };\n    this.parsed = [];\n    this.updateData = this.updateData.bind(this);\n    this.exportToCSVButton = this.exportToCSVButton.bind(this);\n    this.getHeader = this.getHeader.bind(this);\n    this.getFooter = this.getFooter.bind(this);\n    this.getProcessBtn = this.getProcessBtn.bind(this);\n    this.getResetBtn = this.getResetBtn.bind(this);\n    this.reset = this.reset.bind(this);\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      csvfile: event.target.files[0],\n    });\n  };\n\n  importCSV = () => {\n    const { csvfile } = this.state;\n    Papa.parse(csvfile, {\n      complete: this.updateData,\n      header: true,\n    });\n  };\n\n  updateData(result) {\n    let _this = this;\n    let data = result.data;\n\n    this.setState({ file: data });\n    data.forEach((element) => {\n      if (element.name) {\n        let d = new Date(element.date);\n        // _this.newExMonthBill(\n        //   element.endpointName,\n        //   monthNames[d.getMonth()],\n        //   element.price\n        // );\n      }\n    });\n    let parse = [];\n    const extentions = Object.keys(this.parsed);\n\n    let index = 1;\n    for (let i = 0; i < extentions.length; i++) {\n      const currentExt = extentions[i];\n      const currentExtMonths = this.parsed[currentExt];\n\n      const months = Object.keys(this.parsed[currentExt]);\n\n      for (let j = 0; j < months.length; j++) {\n        const currentMonth = months[j];\n        const ext = currentExt; // 666\n        const month = currentMonth; // January\n        const price = currentExtMonths[month].toFixed(2); // 0.0585\n\n        parse.push([index, ext, month, price]);\n\n        index++;\n      }\n    }\n    this.setState({ parse });\n  }\n\n  newExMonthBill(extansion, month, price) {\n    if (this.parsed[extansion]) {\n      if (this.parsed[extansion][month]) {\n        this.parsed[extansion][month] =\n          parseFloat(price) + this.parsed[extansion][month];\n      } else {\n        this.parsed[extansion][month] = parseFloat(price);\n      }\n    } else {\n      this.parsed[extansion] = {};\n      this.parsed[extansion][month] = parseFloat(price);\n    }\n  }\n\n  parseJSon() {\n    const tableHeader = [[\"Name\", \"Date\"]];\n    let auxData = this.state.parse;\n\n    for (let i = 0; i < tableHeader.length; i++) {\n      auxData.unshift(tableHeader[i].join(\",\"));\n    }\n\n    let csvString = auxData.join(\"%0A\");\n\n    let a = document.createElement(\"a\");\n    a.href = \"data:attachment/csv,\" + csvString;\n    a.target = \"_blank\";\n    a.download = `festas.csv`;\n    document.body.appendChild(a);\n    a.click();\n  }\n\n  exportToCSVButton = () => {\n    if (Object.keys(this.parsed).length > 0) {\n      return (\n        <button\n          className=\"wrapper-exp-btn btn btn-dark export-btn\"\n          onClick={() => {\n            this.parseJSon();\n          }}\n        >\n          Exportar a csv\n        </button>\n      );\n    }\n    return <></>;\n  };\n\n  getProcessBtn = () => {\n    if (this.state.csvfile.length <= 0) {\n      return <></>;\n    }\n    return (\n      <button\n        className=\"wrapper-choose-btn btn btn-secondary\"\n        onClick={this.importCSV}\n      >\n        Proceso\n      </button>\n    );\n  };\n\n  reset = () => {\n    this.filesInput.value = \"\";\n    this.parsed = [];\n    this.setState({\n      csvfile: [],\n      file: [],\n      parse: [],\n    });\n  };\n\n  getTable = () => {\n    if (!this.state.parse || this.state.parse.length <= 0) {\n      return <></>;\n    }\n    return (\n      <table className=\"table table-bordered table-hover\">\n        <thead>\n          <tr>\n            <th scope=\"col\">Name</th>\n            <th scope=\"col\">Date</th>\n          </tr>\n        </thead>\n        <tbody>\n          {this.state.parse.map((record, i) => {\n            return (\n              <tr key={i}>\n                {Object.keys(record).map((row, i) => {\n                  return <td key={i}>{record[row]}</td>;\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    );\n  };\n\n  render() {\n    return (\n      <div\n        style={{\n          width: \"100%\",\n        }}\n      >\n        {this.getHeader()}\n        <div className=\"main-container\">\n          <h4 className=\"text-header\">\n            Elija el archivo csv de llamadas para comenzar\n          </h4>\n          <div className=\"wrapper\">\n            <div>\n              {/* input choose file */}\n              <input\n                className=\"wrapper-input form-control\"\n                type=\"file\"\n                placeholder={\"Elija el archivo\"}\n                ref={(input) => {\n                  this.filesInput = input;\n                }}\n                name=\"file\"\n                onChange={this.handleChange}\n              />\n            </div>\n            {/* btn upload file */}\n            <div>{this.getProcessBtn()}</div>\n            {/* btn export to .csv */}\n            <div>\n              {this.getResetBtn()}\n              {this.exportToCSVButton()}\n            </div>\n          </div>\n          {/* show data in the table */}\n          <div className=\"wrapper-table\">{this.getTable()}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Upload;\n"]},"metadata":{},"sourceType":"module"}